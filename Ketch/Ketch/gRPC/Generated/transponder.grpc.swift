//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: transponder/transponder.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Transponder_TransponderRightsClient, then call methods of this protocol to make API calls.
internal protocol Transponder_TransponderRightsClientProtocol: GRPCClient {
  func invokeRight(
    _ request: Transponder_InvokeRightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Transponder_InvokeRightRequest, Transponder_InvokeRightResponse>

  func setRightStatus(
    _ request: Transponder_SetRightStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Transponder_SetRightStatusRequest, Google_Protobuf_Empty>

  func getRightStatus(
    _ request: Transponder_GetRightStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Transponder_GetRightStatusRequest, Transponder_GetRightStatusResponse>

  func cancelRight(
    _ request: Transponder_CancelRightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Transponder_CancelRightRequest, Transponder_CancelRightResponse>

}

extension Transponder_TransponderRightsClientProtocol {

  /// InvokeRight is used to invoke a right for a data subject
  ///
  /// - Parameters:
  ///   - request: Request to send to InvokeRight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func invokeRight(
    _ request: Transponder_InvokeRightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Transponder_InvokeRightRequest, Transponder_InvokeRightResponse> {
    return self.makeUnaryCall(
      path: "/transponder.TransponderRights/InvokeRight",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// SetRightStatus is used to provide a callback from another service to set the right status
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRightStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRightStatus(
    _ request: Transponder_SetRightStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Transponder_SetRightStatusRequest, Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/transponder.TransponderRights/SetRightStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// GetRightStatus is used to get a right status
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRightStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRightStatus(
    _ request: Transponder_GetRightStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Transponder_GetRightStatusRequest, Transponder_GetRightStatusResponse> {
    return self.makeUnaryCall(
      path: "/transponder.TransponderRights/GetRightStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// CancelRight is used to cancel a right request already issued
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelRight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelRight(
    _ request: Transponder_CancelRightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Transponder_CancelRightRequest, Transponder_CancelRightResponse> {
    return self.makeUnaryCall(
      path: "/transponder.TransponderRights/CancelRight",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Transponder_TransponderRightsClient: Transponder_TransponderRightsClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the transponder.TransponderRights service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Transponder_TransponderConsentClient, then call methods of this protocol to make API calls.
internal protocol Transponder_TransponderConsentClientProtocol: GRPCClient {
  func getConsent(
    _ request: Transponder_GetConsentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Transponder_GetConsentRequest, Transponder_GetConsentResponse>

  func setConsent(
    _ request: Transponder_SetConsentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Transponder_SetConsentRequest, Transponder_SetConsentResponse>

}

extension Transponder_TransponderConsentClientProtocol {

  /// GetConsent is used to retrieve existing consents from a data subject
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConsent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getConsent(
    _ request: Transponder_GetConsentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Transponder_GetConsentRequest, Transponder_GetConsentResponse> {
    return self.makeUnaryCall(
      path: "/transponder.TransponderConsent/GetConsent",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// SetConsent is used to provide the consents from a data subject
  ///
  /// - Parameters:
  ///   - request: Request to send to SetConsent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setConsent(
    _ request: Transponder_SetConsentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Transponder_SetConsentRequest, Transponder_SetConsentResponse> {
    return self.makeUnaryCall(
      path: "/transponder.TransponderConsent/SetConsent",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Transponder_TransponderConsentClient: Transponder_TransponderConsentClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the transponder.TransponderConsent service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// Usage: instantiate Transponder_TransponderDiscoveryClient, then call methods of this protocol to make API calls.
internal protocol Transponder_TransponderDiscoveryClientProtocol: GRPCClient {
  func discoverCapabilities(
    _ request: Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Protobuf_Empty, Transponder_DiscoverCapabilitiesResponse>

}

extension Transponder_TransponderDiscoveryClientProtocol {

  /// DiscoverCapabilities is used to discover the capabilities of the service
  ///
  /// - Parameters:
  ///   - request: Request to send to DiscoverCapabilities.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func discoverCapabilities(
    _ request: Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Protobuf_Empty, Transponder_DiscoverCapabilitiesResponse> {
    return self.makeUnaryCall(
      path: "/transponder.TransponderDiscovery/DiscoverCapabilities",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Transponder_TransponderDiscoveryClient: Transponder_TransponderDiscoveryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the transponder.TransponderDiscovery service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Transponder_TransponderRightsProvider: CallHandlerProvider {
  /// InvokeRight is used to invoke a right for a data subject
  func invokeRight(request: Transponder_InvokeRightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Transponder_InvokeRightResponse>
  /// SetRightStatus is used to provide a callback from another service to set the right status
  func setRightStatus(request: Transponder_SetRightStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Protobuf_Empty>
  /// GetRightStatus is used to get a right status
  func getRightStatus(request: Transponder_GetRightStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Transponder_GetRightStatusResponse>
  /// CancelRight is used to cancel a right request already issued
  func cancelRight(request: Transponder_CancelRightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Transponder_CancelRightResponse>
}

extension Transponder_TransponderRightsProvider {
  internal var serviceName: Substring { return "transponder.TransponderRights" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "InvokeRight":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.invokeRight(request: request, context: context)
        }
      }

    case "SetRightStatus":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setRightStatus(request: request, context: context)
        }
      }

    case "GetRightStatus":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getRightStatus(request: request, context: context)
        }
      }

    case "CancelRight":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.cancelRight(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Transponder_TransponderConsentProvider: CallHandlerProvider {
  /// GetConsent is used to retrieve existing consents from a data subject
  func getConsent(request: Transponder_GetConsentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Transponder_GetConsentResponse>
  /// SetConsent is used to provide the consents from a data subject
  func setConsent(request: Transponder_SetConsentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Transponder_SetConsentResponse>
}

extension Transponder_TransponderConsentProvider {
  internal var serviceName: Substring { return "transponder.TransponderConsent" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetConsent":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getConsent(request: request, context: context)
        }
      }

    case "SetConsent":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setConsent(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Transponder_TransponderDiscoveryProvider: CallHandlerProvider {
  /// DiscoverCapabilities is used to discover the capabilities of the service
  func discoverCapabilities(request: Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Transponder_DiscoverCapabilitiesResponse>
}

extension Transponder_TransponderDiscoveryProvider {
  internal var serviceName: Substring { return "transponder.TransponderDiscovery" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "DiscoverCapabilities":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.discoverCapabilities(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

