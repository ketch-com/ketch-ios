// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: transponder/transponder.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Capability is something supported by the service
enum Transponder_Capability: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// InvalidCapability is an invalid capability
  case invalidCapability // = 0

  /// InvokeRightCapability is the capability to InvokeRights
  case invokeRightCapability // = 1

  /// SetConsentCapability is the capability to SetConsent
  case setConsentCapability // = 2

  /// CancelRightCapability is the capability to CancelRight
  case cancelRightCapability // = 3

  /// GetRightStatusCapability is the capability to GetRightStatus
  case rightStatusCapability // = 4

  /// CallbackCapability is the capability to support calling callbacks
  case callbackCapability // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .invalidCapability
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalidCapability
    case 1: self = .invokeRightCapability
    case 2: self = .setConsentCapability
    case 3: self = .cancelRightCapability
    case 4: self = .rightStatusCapability
    case 5: self = .callbackCapability
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .invalidCapability: return 0
    case .invokeRightCapability: return 1
    case .setConsentCapability: return 2
    case .cancelRightCapability: return 3
    case .rightStatusCapability: return 4
    case .callbackCapability: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Transponder_Capability: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Transponder_Capability] = [
    .invalidCapability,
    .invokeRightCapability,
    .setConsentCapability,
    .cancelRightCapability,
    .rightStatusCapability,
    .callbackCapability,
  ]
}

#endif  // swift(>=4.2)

/// InvokableRight describes a right that can be invoked
enum Transponder_InvokableRight: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// InvalidInvokableRight denotes an invalid invokable right
  case invalidInvokableRight // = 0

  /// AccessInvokableRight denotes the right to access data
  case accessInvokableRight // = 1

  /// AnonymizeInvokableRight denotes the right to anonymize data
  case anonymizeInvokableRight // = 2

  /// ErasureInvokableRight denotes the right to erase/delete data
  case erasureInvokableRight // = 3

  /// ObjectInvokableRight denotes the right to object
  case objectInvokableRight // = 4

  /// PortabilityInvokableRight denotes the right to portability of data
  case portabilityInvokableRight // = 5

  /// RectificationInvokableRight denotes the right of rectification of data
  case rectificationInvokableRight // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .invalidInvokableRight
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalidInvokableRight
    case 1: self = .accessInvokableRight
    case 2: self = .anonymizeInvokableRight
    case 3: self = .erasureInvokableRight
    case 4: self = .objectInvokableRight
    case 5: self = .portabilityInvokableRight
    case 6: self = .rectificationInvokableRight
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .invalidInvokableRight: return 0
    case .accessInvokableRight: return 1
    case .anonymizeInvokableRight: return 2
    case .erasureInvokableRight: return 3
    case .objectInvokableRight: return 4
    case .portabilityInvokableRight: return 5
    case .rectificationInvokableRight: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Transponder_InvokableRight: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Transponder_InvokableRight] = [
    .invalidInvokableRight,
    .accessInvokableRight,
    .anonymizeInvokableRight,
    .erasureInvokableRight,
    .objectInvokableRight,
    .portabilityInvokableRight,
    .rectificationInvokableRight,
  ]
}

#endif  // swift(>=4.2)

/// DataSubjectVerification describes how a data subject has been verified
enum Transponder_DataSubjectVerification: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// NoDataSubjectVerification denotes data subject identity has not been verified
  case noDataSubjectVerification // = 0

  /// CaptchaDataSubjectVerification denotes data subject has completed a CAPTCHA to verify they are a human
  case captchaDataSubjectVerification // = 1

  /// EmailDataSubjectVerification denotes data subject has clicked on a link in an email to verify they own the email
  case emailDataSubjectVerification // = 2

  /// SmsDataSubjectVerification denotes data subject has been verified via SMS
  case smsDataSubjectVerification // = 3

  /// AuthenticatedDataSubjectVerification denotes data subject has logged in
  case authenticatedDataSubjectVerification // = 4

  /// GovernmentIDDataSubjectVerification denotes data subject has presented a government-issued ID
  case governmentIddataSubjectVerification // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .noDataSubjectVerification
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noDataSubjectVerification
    case 1: self = .captchaDataSubjectVerification
    case 2: self = .emailDataSubjectVerification
    case 3: self = .smsDataSubjectVerification
    case 4: self = .authenticatedDataSubjectVerification
    case 5: self = .governmentIddataSubjectVerification
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .noDataSubjectVerification: return 0
    case .captchaDataSubjectVerification: return 1
    case .emailDataSubjectVerification: return 2
    case .smsDataSubjectVerification: return 3
    case .authenticatedDataSubjectVerification: return 4
    case .governmentIddataSubjectVerification: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Transponder_DataSubjectVerification: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Transponder_DataSubjectVerification] = [
    .noDataSubjectVerification,
    .captchaDataSubjectVerification,
    .emailDataSubjectVerification,
    .smsDataSubjectVerification,
    .authenticatedDataSubjectVerification,
    .governmentIddataSubjectVerification,
  ]
}

#endif  // swift(>=4.2)

/// RightProcessingStatus describes the status of a right invocation request
enum Transponder_RightProcessingStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// InvalidRightProcessingStatus indicates that the status is in valid
  case invalidRightProcessingStatus // = 0

  /// PendingRightProcessingStatus indicates that a well formed request has been received by the Processor
  case pendingRightProcessingStatus // = 1

  /// InProgressRightProcessingStatus indicates that a request is currently being acted on. Processors SHOULD
  /// indicate this request if possible
  case inProgressRightProcessingStatus // = 2

  /// CompletedRightProcessingStatus indicates that a request has been fulfilled
  case completedRightProcessingStatus // = 3

  /// CancelledRightProcessingStatus indicates that a request has been cancelled
  case cancelledRightProcessingStatus // = 4

  /// FailedRightProcessingStatus indicates that a request has failed to be completed
  case failedRightProcessingStatus // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .invalidRightProcessingStatus
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalidRightProcessingStatus
    case 1: self = .pendingRightProcessingStatus
    case 2: self = .inProgressRightProcessingStatus
    case 3: self = .completedRightProcessingStatus
    case 4: self = .cancelledRightProcessingStatus
    case 5: self = .failedRightProcessingStatus
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .invalidRightProcessingStatus: return 0
    case .pendingRightProcessingStatus: return 1
    case .inProgressRightProcessingStatus: return 2
    case .completedRightProcessingStatus: return 3
    case .cancelledRightProcessingStatus: return 4
    case .failedRightProcessingStatus: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Transponder_RightProcessingStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Transponder_RightProcessingStatus] = [
    .invalidRightProcessingStatus,
    .pendingRightProcessingStatus,
    .inProgressRightProcessingStatus,
    .completedRightProcessingStatus,
    .cancelledRightProcessingStatus,
    .failedRightProcessingStatus,
  ]
}

#endif  // swift(>=4.2)

/// IdentityFormat describes how the identity value is formatted
enum Transponder_IdentityFormat: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// RawIdentityFormat denotes the format is verbatim as it is represented
  case rawIdentityFormat // = 0

  /// Sha1IdentityFormat denotes the value has been SHA1 one-way hashed
  case sha1IdentityFormat // = 1

  /// Sha256IdentityFormat denotes the value has been SHA256 one-way hashed
  case sha256IdentityFormat // = 2

  /// Sha512IdentityFormat denotes the value has been SHA512 one-way hashed
  case sha512IdentityFormat // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .rawIdentityFormat
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .rawIdentityFormat
    case 1: self = .sha1IdentityFormat
    case 2: self = .sha256IdentityFormat
    case 3: self = .sha512IdentityFormat
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .rawIdentityFormat: return 0
    case .sha1IdentityFormat: return 1
    case .sha256IdentityFormat: return 2
    case .sha512IdentityFormat: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Transponder_IdentityFormat: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Transponder_IdentityFormat] = [
    .rawIdentityFormat,
    .sha1IdentityFormat,
    .sha256IdentityFormat,
    .sha512IdentityFormat,
  ]
}

#endif  // swift(>=4.2)

/// IdentityType describes the type of identity
enum Transponder_IdentityType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// InvalidIdentityType denotes the type is invalid
  case invalidIdentityType // = 0

  /// EmailIdentityType denotes an email
  case emailIdentityType // = 1

  /// ControllerCustomerIdIdentityType denotes a customer ID according to the controller
  case controllerCustomerIDIdentityType // = 2

  /// AndroidAdvertisingIdIdentityType denotes the Android Advertising ID
  case androidAdvertisingIDIdentityType // = 3

  /// AndroidIdIdentityType denotes the Android ID
  case androidIDIdentityType // = 4

  /// FireAdvertisingIdIdentityType denotes the Fire Advertising ID
  case fireAdvertisingIDIdentityType // = 5

  /// IosAdvertisingIdIdentityType denotes the iOS Advertising ID
  case iosAdvertisingIDIdentityType // = 6

  /// IosVendorIdIdentityType denotes the iOS Vendor ID
  case iosVendorIDIdentityType // = 7

  /// MicrosoftAdvertisingIdIdentityType denotes the Microsoft Advertising ID
  case microsoftAdvertisingIDIdentityType // = 8

  /// MicrosoftPublisherIdIdentityType denotes the Microsoft Publisher ID
  case microsoftPublisherIDIdentityType // = 9

  /// RokuPublisherIdIdentityType denotes the Roku Publisher ID
  case rokuPublisherIDIdentityType // = 10

  /// RokuAdvertisingIdIdentityType denotes the Roku Advertising ID
  case rokuAdvertisingIDIdentityType // = 11

  /// UniqueBrowserIdIdentityType denotes a (potentially ephemeral) Unique Browser ID (cookie or other)
  case uniqueBrowserIDIdentityType // = 12
  case UNRECOGNIZED(Int)

  init() {
    self = .invalidIdentityType
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalidIdentityType
    case 1: self = .emailIdentityType
    case 2: self = .controllerCustomerIDIdentityType
    case 3: self = .androidAdvertisingIDIdentityType
    case 4: self = .androidIDIdentityType
    case 5: self = .fireAdvertisingIDIdentityType
    case 6: self = .iosAdvertisingIDIdentityType
    case 7: self = .iosVendorIDIdentityType
    case 8: self = .microsoftAdvertisingIDIdentityType
    case 9: self = .microsoftPublisherIDIdentityType
    case 10: self = .rokuPublisherIDIdentityType
    case 11: self = .rokuAdvertisingIDIdentityType
    case 12: self = .uniqueBrowserIDIdentityType
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .invalidIdentityType: return 0
    case .emailIdentityType: return 1
    case .controllerCustomerIDIdentityType: return 2
    case .androidAdvertisingIDIdentityType: return 3
    case .androidIDIdentityType: return 4
    case .fireAdvertisingIDIdentityType: return 5
    case .iosAdvertisingIDIdentityType: return 6
    case .iosVendorIDIdentityType: return 7
    case .microsoftAdvertisingIDIdentityType: return 8
    case .microsoftPublisherIDIdentityType: return 9
    case .rokuPublisherIDIdentityType: return 10
    case .rokuAdvertisingIDIdentityType: return 11
    case .uniqueBrowserIDIdentityType: return 12
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Transponder_IdentityType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Transponder_IdentityType] = [
    .invalidIdentityType,
    .emailIdentityType,
    .controllerCustomerIDIdentityType,
    .androidAdvertisingIDIdentityType,
    .androidIDIdentityType,
    .fireAdvertisingIDIdentityType,
    .iosAdvertisingIDIdentityType,
    .iosVendorIDIdentityType,
    .microsoftAdvertisingIDIdentityType,
    .microsoftPublisherIDIdentityType,
    .rokuPublisherIDIdentityType,
    .rokuAdvertisingIDIdentityType,
    .uniqueBrowserIDIdentityType,
  ]
}

#endif  // swift(>=4.2)

/// Regulation describes the regulation being appealed to
enum Transponder_Regulation: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// InvalidRegulation denotes an invalid regulation specified
  case invalidRegulation // = 0

  /// GDPR (EU)
  case gdprRegulation // = 1

  /// CCPA (US-CA)
  case ccpaRegulation // = 2

  /// LGPD (BR)
  case lgpdRegulation // = 3

  /// APP (AU)
  case appRegulation // = 5

  /// PIPEDA (CA)
  case pipedaRegulation // = 6

  /// PDP (IN)
  case pdpRegulation // = 7

  /// APPI (JP)
  case appiRegulation // = 8

  /// CSL (CN)
  case cslRegulation // = 9

  /// PPL (IL)
  case pplRegulation // = 10
  case UNRECOGNIZED(Int)

  init() {
    self = .invalidRegulation
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalidRegulation
    case 1: self = .gdprRegulation
    case 2: self = .ccpaRegulation
    case 3: self = .lgpdRegulation
    case 5: self = .appRegulation
    case 6: self = .pipedaRegulation
    case 7: self = .pdpRegulation
    case 8: self = .appiRegulation
    case 9: self = .cslRegulation
    case 10: self = .pplRegulation
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .invalidRegulation: return 0
    case .gdprRegulation: return 1
    case .ccpaRegulation: return 2
    case .lgpdRegulation: return 3
    case .appRegulation: return 5
    case .pipedaRegulation: return 6
    case .pdpRegulation: return 7
    case .appiRegulation: return 8
    case .cslRegulation: return 9
    case .pplRegulation: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Transponder_Regulation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Transponder_Regulation] = [
    .invalidRegulation,
    .gdprRegulation,
    .ccpaRegulation,
    .lgpdRegulation,
    .appRegulation,
    .pipedaRegulation,
    .pdpRegulation,
    .appiRegulation,
    .cslRegulation,
    .pplRegulation,
  ]
}

#endif  // swift(>=4.2)

/// CollectionMethod describes how the request was collected
enum Transponder_CollectionMethod: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// UnknownCollectionMethod denotes we do not know how the request was collected
  case unknownCollectionMethod // = 0

  /// EmailCollectionMethod denotes the request was collected via email
  case emailCollectionMethod // = 1

  /// WebCollectionMethod denotes the request was collected via a web form
  case webCollectionMethod // = 2

  /// AppCollectionMethod denotes the request was collected via an App
  case appCollectionMethod // = 3

  /// PhoneCollectionMethod denotes the request was collected via phone conversation/message
  case phoneCollectionMethod // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownCollectionMethod
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownCollectionMethod
    case 1: self = .emailCollectionMethod
    case 2: self = .webCollectionMethod
    case 3: self = .appCollectionMethod
    case 4: self = .phoneCollectionMethod
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownCollectionMethod: return 0
    case .emailCollectionMethod: return 1
    case .webCollectionMethod: return 2
    case .appCollectionMethod: return 3
    case .phoneCollectionMethod: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Transponder_CollectionMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Transponder_CollectionMethod] = [
    .unknownCollectionMethod,
    .emailCollectionMethod,
    .webCollectionMethod,
    .appCollectionMethod,
    .phoneCollectionMethod,
  ]
}

#endif  // swift(>=4.2)

/// LegalBasis describes the legal basis appealed to
enum Transponder_LegalBasis: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Invalid legal basis
  case invalidLegalBasis // = 0

  /// Data subject has been provided with adequate disclosure regarding the processing
  case disclosureLegalBasis // = 1

  /// Data subject has affirmatively and unambiguously consented to the processing for one or more specific purposes
  case consentOptInLegalBasis // = 2

  /// Data subject has received adequate disclosure describing the processing for one or more specific purposes,
  /// and can subsequently opt-out
  case consentOptOutLegalBasis // = 3

  /// Necessary for the performance of a contract to which the data subject is party or in order to take steps at the
  /// request of the data subject prior to entering into a contract
  case contractLegalBasis // = 4

  /// Processing for the protection of credit
  case creditLegalBasis // = 5

  /// Processing to protect health, in a procedure carried out by health professionals/entities
  case healthLegalBasis // = 6

  /// Necessary for compliance with a legal obligation to which the controller is subject
  case legalObligationsLegalBasis // = 7

  /// Necessary for the purposes of the legitimate interests pursued by the controller or by a third party, except
  /// where such interests are overridden by the interests or fundamental rights and freedoms of the data subject
  case legitimateInterestLegalBasis // = 8

  /// Processing for the protection of life or physical safety of the data subject or a third party
  case lifeLegalBasis // = 9

  /// Necessary for the performance of a task carried out in the public interest or in the exercise of official
  /// authority vested in the controller
  case publicInterestLegalBasis // = 10

  /// Processing for studies by research entities, ensuring whenever possible the anonymization of personal data
  case researchLegalBasis // = 11

  /// Necessary to protect the vital interests of the data subject or of another natural person
  case vitalInterestsLegalBasis // = 12
  case UNRECOGNIZED(Int)

  init() {
    self = .invalidLegalBasis
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalidLegalBasis
    case 1: self = .disclosureLegalBasis
    case 2: self = .consentOptInLegalBasis
    case 3: self = .consentOptOutLegalBasis
    case 4: self = .contractLegalBasis
    case 5: self = .creditLegalBasis
    case 6: self = .healthLegalBasis
    case 7: self = .legalObligationsLegalBasis
    case 8: self = .legitimateInterestLegalBasis
    case 9: self = .lifeLegalBasis
    case 10: self = .publicInterestLegalBasis
    case 11: self = .researchLegalBasis
    case 12: self = .vitalInterestsLegalBasis
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .invalidLegalBasis: return 0
    case .disclosureLegalBasis: return 1
    case .consentOptInLegalBasis: return 2
    case .consentOptOutLegalBasis: return 3
    case .contractLegalBasis: return 4
    case .creditLegalBasis: return 5
    case .healthLegalBasis: return 6
    case .legalObligationsLegalBasis: return 7
    case .legitimateInterestLegalBasis: return 8
    case .lifeLegalBasis: return 9
    case .publicInterestLegalBasis: return 10
    case .researchLegalBasis: return 11
    case .vitalInterestsLegalBasis: return 12
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Transponder_LegalBasis: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Transponder_LegalBasis] = [
    .invalidLegalBasis,
    .disclosureLegalBasis,
    .consentOptInLegalBasis,
    .consentOptOutLegalBasis,
    .contractLegalBasis,
    .creditLegalBasis,
    .healthLegalBasis,
    .legalObligationsLegalBasis,
    .legitimateInterestLegalBasis,
    .lifeLegalBasis,
    .publicInterestLegalBasis,
    .researchLegalBasis,
    .vitalInterestsLegalBasis,
  ]
}

#endif  // swift(>=4.2)

/// Identity describes the way of identifying a data subject
struct Transponder_Identity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// IdentityType is the name of the identity space
  var identityType: Transponder_IdentityType = .invalidIdentityType

  /// IdentityValue is the actual identity value
  var identityValue: String = String()

  /// IdentityFormat specifies the format of the identity value
  var identityFormat: Transponder_IdentityFormat = .rawIdentityFormat

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DataSubject describes the information required about a data subject
struct Transponder_DataSubject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// First is the data subject's first name
  var first: String = String()

  /// Last is the data subject's last name
  var last: String = String()

  /// County is the data subject's country code (ISO 3166-2)
  var country: String = String()

  /// StateRegion is the data subject's state/region code (ISO 3166-2)
  var stateRegion: String = String()

  /// VerificationMethod specifies how the data subject was verified
  var verificationMethod: Transponder_DataSubjectVerification = .noDataSubjectVerification

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Controller describes a data controller
struct Transponder_Controller {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID is the identifier of the controller in the originating system
  var id: String = String()

  /// Name is the name of the controller in the originating system
  var name: String = String()

  /// LogoURL is a valid URL to the logo of the controller
  var logoURL: String = String()

  /// AccountID is the account ID of the controller in the processor system
  var accountID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Context provides information to know how a request was collected
struct Transponder_Context {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// CollectedFrom specifies how the request was received
  var collectedFrom: Transponder_CollectionMethod = .unknownCollectionMethod

  /// Application specifies the website or application ID where the request was received
  var application: String = String()

  /// Environment specifies the environment (production, testing, etc)
  var environment: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Purpose describes a purpose.
struct Transponder_Purpose {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Purpose is the code/id/url of the purpose
  var purpose: String = String()

  /// LegalBasis describes the basis on which the purpose consent has been provided
  var legalBasis: Transponder_LegalBasis = .invalidLegalBasis

  /// Allowed is set to true if the purpose is allowed
  var allowed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PurposeDescription describes a purpose
struct Transponder_PurposeDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Purpose is the code/id/url of the purpose
  var purpose: String = String()

  /// Description is a human-readable description of the purpose
  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SupportedIdentity represents a supported type/format pair
struct Transponder_SupportedIdentity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// IdentityType is the name of the identity space
  var identityType: Transponder_IdentityType = .invalidIdentityType

  /// IdentityFormat specifies the format of the identity value
  var identityFormat: Transponder_IdentityFormat = .rawIdentityFormat

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Consent represents a consent to a purpose
struct Transponder_Consent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Purpose is the consent purpose
  var purpose: String = String()

  /// LegalBasis is the legal basis appealed to
  var legalBasis: Transponder_LegalBasis = .invalidLegalBasis

  /// Allowed is true if the purpose is allowed
  var allowed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// InvokeRightRequest is the request sent to the service to invoke a right
struct Transponder_InvokeRightRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  /// Regulation is the regulation under which this right was invoked
  var regulation: Transponder_Regulation = .invalidRegulation

  /// Right is the actual right being invoked
  var right: Transponder_InvokableRight = .invalidInvokableRight

  /// DataSubject is the details about the data subject invoking the right.
  var dataSubject: Transponder_DataSubject {
    get {return _dataSubject ?? Transponder_DataSubject()}
    set {_dataSubject = newValue}
  }
  /// Returns true if `dataSubject` has been explicitly set.
  var hasDataSubject: Bool {return self._dataSubject != nil}
  /// Clears the value of `dataSubject`. Subsequent reads from it will return its default value.
  mutating func clearDataSubject() {self._dataSubject = nil}

  /// Identities is a list of identities for the data subject.
  var identities: [Transponder_Identity] = []

  /// Controller is the details about the controller
  var controller: Transponder_Controller {
    get {return _controller ?? Transponder_Controller()}
    set {_controller = newValue}
  }
  /// Returns true if `controller` has been explicitly set.
  var hasController: Bool {return self._controller != nil}
  /// Clears the value of `controller`. Subsequent reads from it will return its default value.
  mutating func clearController() {self._controller = nil}

  /// SubmittedTime is the timestamp when this right was originally invoked.
  var submittedTime: Int64 = 0

  /// DueTime is the timestamp when this right invocation request should be completed.
  var dueTime: Int64 = 0

  /// Context provides information about where and how the right invocation was collected.
  var context: Transponder_Context {
    get {return _context ?? Transponder_Context()}
    set {_context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  var hasContext: Bool {return self._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  mutating func clearContext() {self._context = nil}

  /// StatusCallbackUrls is a list of URL's that are to be called back with status of the request.
  var statusCallbackUrls: [String] = []

  /// Extensions allow vendor-scoped extensions to the protocol
  var extensions: Google_Protobuf_Struct {
    get {return _extensions ?? Google_Protobuf_Struct()}
    set {_extensions = newValue}
  }
  /// Returns true if `extensions` has been explicitly set.
  var hasExtensions: Bool {return self._extensions != nil}
  /// Clears the value of `extensions`. Subsequent reads from it will return its default value.
  mutating func clearExtensions() {self._extensions = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dataSubject: Transponder_DataSubject? = nil
  fileprivate var _controller: Transponder_Controller? = nil
  fileprivate var _context: Transponder_Context? = nil
  fileprivate var _extensions: Google_Protobuf_Struct? = nil
}

/// InvokeRightResponse is the response returned from invoking a right
struct Transponder_InvokeRightResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  /// ControllerID is the unique identity of the Controller in the Processor’s system.
  var controllerID: String = String()

  /// ExpectedCompletionTime is the time when the Processor expects to fulfill the request.
  var expectedCompletionTime: Int64 = 0

  /// ReceivedTime is the time when the Processor received the request.
  var receivedTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SetConsentRequest is the request sent to the service to set consent
struct Transponder_SetConsentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  /// Regulation is the regulation under which this right was invoked
  var regulation: Transponder_Regulation = .invalidRegulation

  /// Purposes is a list of purposes
  var purposes: [Transponder_Purpose] = []

  /// DataSubject is the details about the data subject invoking the right
  var dataSubject: Transponder_DataSubject {
    get {return _dataSubject ?? Transponder_DataSubject()}
    set {_dataSubject = newValue}
  }
  /// Returns true if `dataSubject` has been explicitly set.
  var hasDataSubject: Bool {return self._dataSubject != nil}
  /// Clears the value of `dataSubject`. Subsequent reads from it will return its default value.
  mutating func clearDataSubject() {self._dataSubject = nil}

  /// Identities is a list of identities for the data subject.
  var identities: [Transponder_Identity] = []

  /// Controller is the details about the controller
  var controller: Transponder_Controller {
    get {return _controller ?? Transponder_Controller()}
    set {_controller = newValue}
  }
  /// Returns true if `controller` has been explicitly set.
  var hasController: Bool {return self._controller != nil}
  /// Clears the value of `controller`. Subsequent reads from it will return its default value.
  mutating func clearController() {self._controller = nil}

  /// InvokedTime is the timestamp when this consent was originally collected
  var invokedTime: Int64 = 0

  /// ExpiryTime is the timestamp when this consent expires
  var expiryTime: Int64 = 0

  /// Context provides information about where and how the right invocation was collected
  var context: Transponder_Context {
    get {return _context ?? Transponder_Context()}
    set {_context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  var hasContext: Bool {return self._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  mutating func clearContext() {self._context = nil}

  /// Extensions allow vendor-scoped extensions to the protocol
  var extensions: Google_Protobuf_Struct {
    get {return _extensions ?? Google_Protobuf_Struct()}
    set {_extensions = newValue}
  }
  /// Returns true if `extensions` has been explicitly set.
  var hasExtensions: Bool {return self._extensions != nil}
  /// Clears the value of `extensions`. Subsequent reads from it will return its default value.
  mutating func clearExtensions() {self._extensions = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dataSubject: Transponder_DataSubject? = nil
  fileprivate var _controller: Transponder_Controller? = nil
  fileprivate var _context: Transponder_Context? = nil
  fileprivate var _extensions: Google_Protobuf_Struct? = nil
}

/// SetConsentResponse is the response returned when consent is set
struct Transponder_SetConsentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  /// ReceivedTime is the time when the Processor received the request
  var receivedTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SetRightStatusRequest is the request sent to a status callback to provide status on the right request
struct Transponder_SetRightStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  /// ControllerID is the unique identity of the Controller in the Processor’s system
  var controllerID: String = String()

  /// Status is the status of the request
  var status: Transponder_RightProcessingStatus = .invalidRightProcessingStatus

  /// ExpectedCompletionTime is the timestamp when the Processor expects to fulfill the request
  var expectedCompletionTime: Int64 = 0

  /// ResultsUrl is the URL where the results of the request are available
  var resultsURL: String = String()

  /// ResultsCount is a count of results found when fulfilling this request
  var resultsCount: Int64 = 0

  /// StatusCallbackUrl is the URL being called
  var statusCallbackURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GetRightStatusRequest is the request sent to the service to get the status of a right request
struct Transponder_GetRightStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GetRightStatusResponse is the response returned from the service providing the status of the request
struct Transponder_GetRightStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  /// ControllerID is the unique identity of the Controller in the Processor’s system
  var controllerID: String = String()

  /// Status is the status of the request
  var status: Transponder_RightProcessingStatus = .invalidRightProcessingStatus

  /// ExpectedCompletionTime is the timestamp when the Processor expects to fulfill the request
  var expectedCompletionTime: Int64 = 0

  /// ResultsUrl is the URL where the results of the request are available
  var resultsURL: String = String()

  /// ResultsCount is a count of results found when fulfilling this request
  var resultsCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// CancelRightRequest is the request sent to the service to cancel a right request
struct Transponder_CancelRightRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// CancelRightResponse is the response sent from the service when a right request cancellation has been received
struct Transponder_CancelRightResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  /// ControllerID is the unique identity of the Controller in the Processor’s system
  var controllerID: String = String()

  /// ReceivedTime is the time when the Processor received the cancellation request
  var receivedTime: Int64 = 0

  /// Status is the status of the request
  var status: Transponder_RightProcessingStatus = .invalidRightProcessingStatus

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DiscoverCapabilitiesResponse is the response sent from a service that specifies the capabilities of the service
struct Transponder_DiscoverCapabilitiesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// SupportedCapabilities lists the capabilities supported by the service
  var supportedCapabilities: [Transponder_Capability] = []

  /// SupportedRegulations lists the regulations supported by the service
  var supportedRegulations: [Transponder_Regulation] = []

  /// SupportedIdentities lists the identity types/formats supported by the service
  var supportedIdentities: [Transponder_SupportedIdentity] = []

  /// SupportedPurposes lists the purposes supported by the service
  var supportedPurposes: [Transponder_PurposeDescription] = []

  /// SupportedRights lists the rights supported by the service
  var supportedRights: [Transponder_InvokableRight] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GetConsentRequest
struct Transponder_GetConsentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  /// Context provides context for how the consent was requested
  var context: Transponder_Context {
    get {return _context ?? Transponder_Context()}
    set {_context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  var hasContext: Bool {return self._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  mutating func clearContext() {self._context = nil}

  /// Identities is a list of identities
  var identities: [Transponder_Identity] = []

  /// Consents is a list of Purpose/Legal bases
  var purposes: [Transponder_Consent] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _context: Transponder_Context? = nil
}

/// GetConsentResponse
struct Transponder_GetConsentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// RequestID is the unique identifier of the request
  var requestID: String = String()

  /// Consents is a list of consents available
  var consents: [Transponder_Consent] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "transponder"

extension Transponder_Capability: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "InvalidCapability"),
    1: .same(proto: "InvokeRightCapability"),
    2: .same(proto: "SetConsentCapability"),
    3: .same(proto: "CancelRightCapability"),
    4: .same(proto: "RightStatusCapability"),
    5: .same(proto: "CallbackCapability"),
  ]
}

extension Transponder_InvokableRight: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "InvalidInvokableRight"),
    1: .same(proto: "AccessInvokableRight"),
    2: .same(proto: "AnonymizeInvokableRight"),
    3: .same(proto: "ErasureInvokableRight"),
    4: .same(proto: "ObjectInvokableRight"),
    5: .same(proto: "PortabilityInvokableRight"),
    6: .same(proto: "RectificationInvokableRight"),
  ]
}

extension Transponder_DataSubjectVerification: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NoDataSubjectVerification"),
    1: .same(proto: "CaptchaDataSubjectVerification"),
    2: .same(proto: "EmailDataSubjectVerification"),
    3: .same(proto: "SmsDataSubjectVerification"),
    4: .same(proto: "AuthenticatedDataSubjectVerification"),
    5: .same(proto: "GovernmentIDDataSubjectVerification"),
  ]
}

extension Transponder_RightProcessingStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "InvalidRightProcessingStatus"),
    1: .same(proto: "PendingRightProcessingStatus"),
    2: .same(proto: "InProgressRightProcessingStatus"),
    3: .same(proto: "CompletedRightProcessingStatus"),
    4: .same(proto: "CancelledRightProcessingStatus"),
    5: .same(proto: "FailedRightProcessingStatus"),
  ]
}

extension Transponder_IdentityFormat: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RawIdentityFormat"),
    1: .same(proto: "Sha1IdentityFormat"),
    2: .same(proto: "Sha256IdentityFormat"),
    3: .same(proto: "Sha512IdentityFormat"),
  ]
}

extension Transponder_IdentityType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "InvalidIdentityType"),
    1: .same(proto: "EmailIdentityType"),
    2: .same(proto: "ControllerCustomerIdIdentityType"),
    3: .same(proto: "AndroidAdvertisingIdIdentityType"),
    4: .same(proto: "AndroidIdIdentityType"),
    5: .same(proto: "FireAdvertisingIdIdentityType"),
    6: .same(proto: "IosAdvertisingIdIdentityType"),
    7: .same(proto: "IosVendorIdIdentityType"),
    8: .same(proto: "MicrosoftAdvertisingIdIdentityType"),
    9: .same(proto: "MicrosoftPublisherIdIdentityType"),
    10: .same(proto: "RokuPublisherIdIdentityType"),
    11: .same(proto: "RokuAdvertisingIdIdentityType"),
    12: .same(proto: "UniqueBrowserIdIdentityType"),
  ]
}

extension Transponder_Regulation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "InvalidRegulation"),
    1: .same(proto: "GdprRegulation"),
    2: .same(proto: "CcpaRegulation"),
    3: .same(proto: "LgpdRegulation"),
    5: .same(proto: "AppRegulation"),
    6: .same(proto: "PipedaRegulation"),
    7: .same(proto: "PdpRegulation"),
    8: .same(proto: "AppiRegulation"),
    9: .same(proto: "CslRegulation"),
    10: .same(proto: "PplRegulation"),
  ]
}

extension Transponder_CollectionMethod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UnknownCollectionMethod"),
    1: .same(proto: "EmailCollectionMethod"),
    2: .same(proto: "WebCollectionMethod"),
    3: .same(proto: "AppCollectionMethod"),
    4: .same(proto: "PhoneCollectionMethod"),
  ]
}

extension Transponder_LegalBasis: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "InvalidLegalBasis"),
    1: .same(proto: "DisclosureLegalBasis"),
    2: .same(proto: "ConsentOptInLegalBasis"),
    3: .same(proto: "ConsentOptOutLegalBasis"),
    4: .same(proto: "ContractLegalBasis"),
    5: .same(proto: "CreditLegalBasis"),
    6: .same(proto: "HealthLegalBasis"),
    7: .same(proto: "LegalObligationsLegalBasis"),
    8: .same(proto: "LegitimateInterestLegalBasis"),
    9: .same(proto: "LifeLegalBasis"),
    10: .same(proto: "PublicInterestLegalBasis"),
    11: .same(proto: "ResearchLegalBasis"),
    12: .same(proto: "VitalInterestsLegalBasis"),
  ]
}

extension Transponder_Identity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Identity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_type"),
    2: .standard(proto: "identity_value"),
    3: .standard(proto: "identity_format"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.identityType)
      case 2: try decoder.decodeSingularStringField(value: &self.identityValue)
      case 3: try decoder.decodeSingularEnumField(value: &self.identityFormat)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.identityType != .invalidIdentityType {
      try visitor.visitSingularEnumField(value: self.identityType, fieldNumber: 1)
    }
    if !self.identityValue.isEmpty {
      try visitor.visitSingularStringField(value: self.identityValue, fieldNumber: 2)
    }
    if self.identityFormat != .rawIdentityFormat {
      try visitor.visitSingularEnumField(value: self.identityFormat, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_Identity, rhs: Transponder_Identity) -> Bool {
    if lhs.identityType != rhs.identityType {return false}
    if lhs.identityValue != rhs.identityValue {return false}
    if lhs.identityFormat != rhs.identityFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_DataSubject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataSubject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "first"),
    2: .same(proto: "last"),
    3: .same(proto: "country"),
    4: .standard(proto: "state_region"),
    5: .standard(proto: "verification_method"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.first)
      case 2: try decoder.decodeSingularStringField(value: &self.last)
      case 3: try decoder.decodeSingularStringField(value: &self.country)
      case 4: try decoder.decodeSingularStringField(value: &self.stateRegion)
      case 5: try decoder.decodeSingularEnumField(value: &self.verificationMethod)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.first.isEmpty {
      try visitor.visitSingularStringField(value: self.first, fieldNumber: 1)
    }
    if !self.last.isEmpty {
      try visitor.visitSingularStringField(value: self.last, fieldNumber: 2)
    }
    if !self.country.isEmpty {
      try visitor.visitSingularStringField(value: self.country, fieldNumber: 3)
    }
    if !self.stateRegion.isEmpty {
      try visitor.visitSingularStringField(value: self.stateRegion, fieldNumber: 4)
    }
    if self.verificationMethod != .noDataSubjectVerification {
      try visitor.visitSingularEnumField(value: self.verificationMethod, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_DataSubject, rhs: Transponder_DataSubject) -> Bool {
    if lhs.first != rhs.first {return false}
    if lhs.last != rhs.last {return false}
    if lhs.country != rhs.country {return false}
    if lhs.stateRegion != rhs.stateRegion {return false}
    if lhs.verificationMethod != rhs.verificationMethod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_Controller: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Controller"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "logo_url"),
    4: .standard(proto: "account_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.logoURL)
      case 4: try decoder.decodeSingularStringField(value: &self.accountID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.logoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.logoURL, fieldNumber: 3)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_Controller, rhs: Transponder_Controller) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.logoURL != rhs.logoURL {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_Context: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Context"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collected_from"),
    2: .same(proto: "application"),
    3: .same(proto: "environment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.collectedFrom)
      case 2: try decoder.decodeSingularStringField(value: &self.application)
      case 3: try decoder.decodeSingularStringField(value: &self.environment)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.collectedFrom != .unknownCollectionMethod {
      try visitor.visitSingularEnumField(value: self.collectedFrom, fieldNumber: 1)
    }
    if !self.application.isEmpty {
      try visitor.visitSingularStringField(value: self.application, fieldNumber: 2)
    }
    if !self.environment.isEmpty {
      try visitor.visitSingularStringField(value: self.environment, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_Context, rhs: Transponder_Context) -> Bool {
    if lhs.collectedFrom != rhs.collectedFrom {return false}
    if lhs.application != rhs.application {return false}
    if lhs.environment != rhs.environment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_Purpose: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Purpose"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "purpose"),
    2: .standard(proto: "legal_basis"),
    3: .same(proto: "allowed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.purpose)
      case 2: try decoder.decodeSingularEnumField(value: &self.legalBasis)
      case 3: try decoder.decodeSingularBoolField(value: &self.allowed)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.purpose.isEmpty {
      try visitor.visitSingularStringField(value: self.purpose, fieldNumber: 1)
    }
    if self.legalBasis != .invalidLegalBasis {
      try visitor.visitSingularEnumField(value: self.legalBasis, fieldNumber: 2)
    }
    if self.allowed != false {
      try visitor.visitSingularBoolField(value: self.allowed, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_Purpose, rhs: Transponder_Purpose) -> Bool {
    if lhs.purpose != rhs.purpose {return false}
    if lhs.legalBasis != rhs.legalBasis {return false}
    if lhs.allowed != rhs.allowed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_PurposeDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PurposeDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "purpose"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.purpose)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.purpose.isEmpty {
      try visitor.visitSingularStringField(value: self.purpose, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_PurposeDescription, rhs: Transponder_PurposeDescription) -> Bool {
    if lhs.purpose != rhs.purpose {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_SupportedIdentity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SupportedIdentity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_type"),
    2: .standard(proto: "identity_format"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.identityType)
      case 2: try decoder.decodeSingularEnumField(value: &self.identityFormat)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.identityType != .invalidIdentityType {
      try visitor.visitSingularEnumField(value: self.identityType, fieldNumber: 1)
    }
    if self.identityFormat != .rawIdentityFormat {
      try visitor.visitSingularEnumField(value: self.identityFormat, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_SupportedIdentity, rhs: Transponder_SupportedIdentity) -> Bool {
    if lhs.identityType != rhs.identityType {return false}
    if lhs.identityFormat != rhs.identityFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_Consent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Consent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "purpose"),
    2: .standard(proto: "legal_basis"),
    3: .same(proto: "allowed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.purpose)
      case 2: try decoder.decodeSingularEnumField(value: &self.legalBasis)
      case 3: try decoder.decodeSingularBoolField(value: &self.allowed)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.purpose.isEmpty {
      try visitor.visitSingularStringField(value: self.purpose, fieldNumber: 1)
    }
    if self.legalBasis != .invalidLegalBasis {
      try visitor.visitSingularEnumField(value: self.legalBasis, fieldNumber: 2)
    }
    if self.allowed != false {
      try visitor.visitSingularBoolField(value: self.allowed, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_Consent, rhs: Transponder_Consent) -> Bool {
    if lhs.purpose != rhs.purpose {return false}
    if lhs.legalBasis != rhs.legalBasis {return false}
    if lhs.allowed != rhs.allowed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_InvokeRightRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InvokeRightRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "regulation"),
    3: .same(proto: "right"),
    4: .standard(proto: "data_subject"),
    5: .same(proto: "identities"),
    6: .same(proto: "controller"),
    7: .standard(proto: "submitted_time"),
    8: .standard(proto: "due_time"),
    9: .same(proto: "context"),
    10: .standard(proto: "status_callback_urls"),
    100: .same(proto: "extensions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      case 2: try decoder.decodeSingularEnumField(value: &self.regulation)
      case 3: try decoder.decodeSingularEnumField(value: &self.right)
      case 4: try decoder.decodeSingularMessageField(value: &self._dataSubject)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.identities)
      case 6: try decoder.decodeSingularMessageField(value: &self._controller)
      case 7: try decoder.decodeSingularInt64Field(value: &self.submittedTime)
      case 8: try decoder.decodeSingularInt64Field(value: &self.dueTime)
      case 9: try decoder.decodeSingularMessageField(value: &self._context)
      case 10: try decoder.decodeRepeatedStringField(value: &self.statusCallbackUrls)
      case 100: try decoder.decodeSingularMessageField(value: &self._extensions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if self.regulation != .invalidRegulation {
      try visitor.visitSingularEnumField(value: self.regulation, fieldNumber: 2)
    }
    if self.right != .invalidInvokableRight {
      try visitor.visitSingularEnumField(value: self.right, fieldNumber: 3)
    }
    if let v = self._dataSubject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.identities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identities, fieldNumber: 5)
    }
    if let v = self._controller {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.submittedTime != 0 {
      try visitor.visitSingularInt64Field(value: self.submittedTime, fieldNumber: 7)
    }
    if self.dueTime != 0 {
      try visitor.visitSingularInt64Field(value: self.dueTime, fieldNumber: 8)
    }
    if let v = self._context {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if !self.statusCallbackUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.statusCallbackUrls, fieldNumber: 10)
    }
    if let v = self._extensions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_InvokeRightRequest, rhs: Transponder_InvokeRightRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.regulation != rhs.regulation {return false}
    if lhs.right != rhs.right {return false}
    if lhs._dataSubject != rhs._dataSubject {return false}
    if lhs.identities != rhs.identities {return false}
    if lhs._controller != rhs._controller {return false}
    if lhs.submittedTime != rhs.submittedTime {return false}
    if lhs.dueTime != rhs.dueTime {return false}
    if lhs._context != rhs._context {return false}
    if lhs.statusCallbackUrls != rhs.statusCallbackUrls {return false}
    if lhs._extensions != rhs._extensions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_InvokeRightResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InvokeRightResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "controller_id"),
    3: .standard(proto: "expected_completion_time"),
    4: .standard(proto: "received_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      case 2: try decoder.decodeSingularStringField(value: &self.controllerID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.expectedCompletionTime)
      case 4: try decoder.decodeSingularInt64Field(value: &self.receivedTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.controllerID.isEmpty {
      try visitor.visitSingularStringField(value: self.controllerID, fieldNumber: 2)
    }
    if self.expectedCompletionTime != 0 {
      try visitor.visitSingularInt64Field(value: self.expectedCompletionTime, fieldNumber: 3)
    }
    if self.receivedTime != 0 {
      try visitor.visitSingularInt64Field(value: self.receivedTime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_InvokeRightResponse, rhs: Transponder_InvokeRightResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.controllerID != rhs.controllerID {return false}
    if lhs.expectedCompletionTime != rhs.expectedCompletionTime {return false}
    if lhs.receivedTime != rhs.receivedTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_SetConsentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetConsentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "regulation"),
    4: .same(proto: "purposes"),
    5: .standard(proto: "data_subject"),
    6: .same(proto: "identities"),
    7: .same(proto: "controller"),
    8: .standard(proto: "invoked_time"),
    9: .standard(proto: "expiry_time"),
    10: .same(proto: "context"),
    100: .same(proto: "extensions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      case 2: try decoder.decodeSingularEnumField(value: &self.regulation)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.purposes)
      case 5: try decoder.decodeSingularMessageField(value: &self._dataSubject)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.identities)
      case 7: try decoder.decodeSingularMessageField(value: &self._controller)
      case 8: try decoder.decodeSingularInt64Field(value: &self.invokedTime)
      case 9: try decoder.decodeSingularInt64Field(value: &self.expiryTime)
      case 10: try decoder.decodeSingularMessageField(value: &self._context)
      case 100: try decoder.decodeSingularMessageField(value: &self._extensions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if self.regulation != .invalidRegulation {
      try visitor.visitSingularEnumField(value: self.regulation, fieldNumber: 2)
    }
    if !self.purposes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.purposes, fieldNumber: 4)
    }
    if let v = self._dataSubject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.identities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identities, fieldNumber: 6)
    }
    if let v = self._controller {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if self.invokedTime != 0 {
      try visitor.visitSingularInt64Field(value: self.invokedTime, fieldNumber: 8)
    }
    if self.expiryTime != 0 {
      try visitor.visitSingularInt64Field(value: self.expiryTime, fieldNumber: 9)
    }
    if let v = self._context {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._extensions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_SetConsentRequest, rhs: Transponder_SetConsentRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.regulation != rhs.regulation {return false}
    if lhs.purposes != rhs.purposes {return false}
    if lhs._dataSubject != rhs._dataSubject {return false}
    if lhs.identities != rhs.identities {return false}
    if lhs._controller != rhs._controller {return false}
    if lhs.invokedTime != rhs.invokedTime {return false}
    if lhs.expiryTime != rhs.expiryTime {return false}
    if lhs._context != rhs._context {return false}
    if lhs._extensions != rhs._extensions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_SetConsentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetConsentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    3: .standard(proto: "received_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.receivedTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if self.receivedTime != 0 {
      try visitor.visitSingularInt64Field(value: self.receivedTime, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_SetConsentResponse, rhs: Transponder_SetConsentResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.receivedTime != rhs.receivedTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_SetRightStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetRightStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "controller_id"),
    3: .same(proto: "status"),
    4: .standard(proto: "expected_completion_time"),
    5: .standard(proto: "results_url"),
    6: .standard(proto: "results_count"),
    7: .standard(proto: "status_callback_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      case 2: try decoder.decodeSingularStringField(value: &self.controllerID)
      case 3: try decoder.decodeSingularEnumField(value: &self.status)
      case 4: try decoder.decodeSingularInt64Field(value: &self.expectedCompletionTime)
      case 5: try decoder.decodeSingularStringField(value: &self.resultsURL)
      case 6: try decoder.decodeSingularInt64Field(value: &self.resultsCount)
      case 7: try decoder.decodeSingularStringField(value: &self.statusCallbackURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.controllerID.isEmpty {
      try visitor.visitSingularStringField(value: self.controllerID, fieldNumber: 2)
    }
    if self.status != .invalidRightProcessingStatus {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if self.expectedCompletionTime != 0 {
      try visitor.visitSingularInt64Field(value: self.expectedCompletionTime, fieldNumber: 4)
    }
    if !self.resultsURL.isEmpty {
      try visitor.visitSingularStringField(value: self.resultsURL, fieldNumber: 5)
    }
    if self.resultsCount != 0 {
      try visitor.visitSingularInt64Field(value: self.resultsCount, fieldNumber: 6)
    }
    if !self.statusCallbackURL.isEmpty {
      try visitor.visitSingularStringField(value: self.statusCallbackURL, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_SetRightStatusRequest, rhs: Transponder_SetRightStatusRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.controllerID != rhs.controllerID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.expectedCompletionTime != rhs.expectedCompletionTime {return false}
    if lhs.resultsURL != rhs.resultsURL {return false}
    if lhs.resultsCount != rhs.resultsCount {return false}
    if lhs.statusCallbackURL != rhs.statusCallbackURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_GetRightStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRightStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_GetRightStatusRequest, rhs: Transponder_GetRightStatusRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_GetRightStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRightStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "controller_id"),
    3: .same(proto: "status"),
    4: .standard(proto: "expected_completion_time"),
    5: .standard(proto: "results_url"),
    6: .standard(proto: "results_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      case 2: try decoder.decodeSingularStringField(value: &self.controllerID)
      case 3: try decoder.decodeSingularEnumField(value: &self.status)
      case 4: try decoder.decodeSingularInt64Field(value: &self.expectedCompletionTime)
      case 5: try decoder.decodeSingularStringField(value: &self.resultsURL)
      case 6: try decoder.decodeSingularInt64Field(value: &self.resultsCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.controllerID.isEmpty {
      try visitor.visitSingularStringField(value: self.controllerID, fieldNumber: 2)
    }
    if self.status != .invalidRightProcessingStatus {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if self.expectedCompletionTime != 0 {
      try visitor.visitSingularInt64Field(value: self.expectedCompletionTime, fieldNumber: 4)
    }
    if !self.resultsURL.isEmpty {
      try visitor.visitSingularStringField(value: self.resultsURL, fieldNumber: 5)
    }
    if self.resultsCount != 0 {
      try visitor.visitSingularInt64Field(value: self.resultsCount, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_GetRightStatusResponse, rhs: Transponder_GetRightStatusResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.controllerID != rhs.controllerID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.expectedCompletionTime != rhs.expectedCompletionTime {return false}
    if lhs.resultsURL != rhs.resultsURL {return false}
    if lhs.resultsCount != rhs.resultsCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_CancelRightRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CancelRightRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_CancelRightRequest, rhs: Transponder_CancelRightRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_CancelRightResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CancelRightResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "controller_id"),
    3: .standard(proto: "received_time"),
    4: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      case 2: try decoder.decodeSingularStringField(value: &self.controllerID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.receivedTime)
      case 4: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.controllerID.isEmpty {
      try visitor.visitSingularStringField(value: self.controllerID, fieldNumber: 2)
    }
    if self.receivedTime != 0 {
      try visitor.visitSingularInt64Field(value: self.receivedTime, fieldNumber: 3)
    }
    if self.status != .invalidRightProcessingStatus {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_CancelRightResponse, rhs: Transponder_CancelRightResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.controllerID != rhs.controllerID {return false}
    if lhs.receivedTime != rhs.receivedTime {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_DiscoverCapabilitiesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DiscoverCapabilitiesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "supported_capabilities"),
    2: .standard(proto: "supported_regulations"),
    4: .standard(proto: "supported_identities"),
    5: .standard(proto: "supported_purposes"),
    6: .standard(proto: "supported_rights"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.supportedCapabilities)
      case 2: try decoder.decodeRepeatedEnumField(value: &self.supportedRegulations)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.supportedIdentities)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.supportedPurposes)
      case 6: try decoder.decodeRepeatedEnumField(value: &self.supportedRights)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.supportedCapabilities.isEmpty {
      try visitor.visitPackedEnumField(value: self.supportedCapabilities, fieldNumber: 1)
    }
    if !self.supportedRegulations.isEmpty {
      try visitor.visitPackedEnumField(value: self.supportedRegulations, fieldNumber: 2)
    }
    if !self.supportedIdentities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.supportedIdentities, fieldNumber: 4)
    }
    if !self.supportedPurposes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.supportedPurposes, fieldNumber: 5)
    }
    if !self.supportedRights.isEmpty {
      try visitor.visitPackedEnumField(value: self.supportedRights, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_DiscoverCapabilitiesResponse, rhs: Transponder_DiscoverCapabilitiesResponse) -> Bool {
    if lhs.supportedCapabilities != rhs.supportedCapabilities {return false}
    if lhs.supportedRegulations != rhs.supportedRegulations {return false}
    if lhs.supportedIdentities != rhs.supportedIdentities {return false}
    if lhs.supportedPurposes != rhs.supportedPurposes {return false}
    if lhs.supportedRights != rhs.supportedRights {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_GetConsentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetConsentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    3: .same(proto: "context"),
    4: .same(proto: "identities"),
    6: .same(proto: "purposes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      case 3: try decoder.decodeSingularMessageField(value: &self._context)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.identities)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.purposes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if let v = self._context {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.identities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identities, fieldNumber: 4)
    }
    if !self.purposes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.purposes, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_GetConsentRequest, rhs: Transponder_GetConsentRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs._context != rhs._context {return false}
    if lhs.identities != rhs.identities {return false}
    if lhs.purposes != rhs.purposes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transponder_GetConsentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetConsentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "consents"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.consents)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.consents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.consents, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transponder_GetConsentResponse, rhs: Transponder_GetConsentResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.consents != rhs.consents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
