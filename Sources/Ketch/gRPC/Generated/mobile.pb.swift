// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mobile.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Mobile_ConfigurationOrganization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mobile_ConfigurationPolicyScopeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var defaultScopeCode: String = String()

  var variable: String = String()

  var scopes: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mobile_ConfigurationApplication {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var name: String = String()

  var platform: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mobile_ConfigurationEnvironment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var pattern: String = String()

  var hash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mobile_ConfigurationDeployment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var version: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mobile_ConfigurationPurpose {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var name: String = String()

  var description_p: String = String()

  var legalBasisCode: String = String()

  var requiresOptIn: Bool = false

  var allowsOptOut: Bool = false

  var requiresPrivacyPolicy: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mobile_ConfigurationIdentity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: String = String()

  var variable: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mobile_ConfigurationPolicyDocument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var version: Int64 = 0

  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mobile_ConfigurationRight {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var name: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mobile_GetConfigurationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var organizationCode: String = String()

  var applicationCode: String = String()

  var applicationEnvironmentCode: String = String()

  var ip: String = String()

  var countryCode: String = String()

  var regionCode: String = String()

  var languageCode: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mobile_GetConfigurationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var language: String {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  var countryCode: String {
    get {return _storage._countryCode}
    set {_uniqueStorage()._countryCode = newValue}
  }

  var regionCode: String {
    get {return _storage._regionCode}
    set {_uniqueStorage()._regionCode = newValue}
  }

  var organization: Mobile_ConfigurationOrganization {
    get {return _storage._organization ?? Mobile_ConfigurationOrganization()}
    set {_uniqueStorage()._organization = newValue}
  }
  /// Returns true if `organization` has been explicitly set.
  var hasOrganization: Bool {return _storage._organization != nil}
  /// Clears the value of `organization`. Subsequent reads from it will return its default value.
  mutating func clearOrganization() {_uniqueStorage()._organization = nil}

  var app: Mobile_ConfigurationApplication {
    get {return _storage._app ?? Mobile_ConfigurationApplication()}
    set {_uniqueStorage()._app = newValue}
  }
  /// Returns true if `app` has been explicitly set.
  var hasApp: Bool {return _storage._app != nil}
  /// Clears the value of `app`. Subsequent reads from it will return its default value.
  mutating func clearApp() {_uniqueStorage()._app = nil}

  var environments: [Mobile_ConfigurationEnvironment] {
    get {return _storage._environments}
    set {_uniqueStorage()._environments = newValue}
  }

  var policyScope: Mobile_ConfigurationPolicyScopeInfo {
    get {return _storage._policyScope ?? Mobile_ConfigurationPolicyScopeInfo()}
    set {_uniqueStorage()._policyScope = newValue}
  }
  /// Returns true if `policyScope` has been explicitly set.
  var hasPolicyScope: Bool {return _storage._policyScope != nil}
  /// Clears the value of `policyScope`. Subsequent reads from it will return its default value.
  mutating func clearPolicyScope() {_uniqueStorage()._policyScope = nil}

  var identities: Dictionary<String,Mobile_ConfigurationIdentity> {
    get {return _storage._identities}
    set {_uniqueStorage()._identities = newValue}
  }

  var environment: Mobile_ConfigurationEnvironment {
    get {return _storage._environment ?? Mobile_ConfigurationEnvironment()}
    set {_uniqueStorage()._environment = newValue}
  }
  /// Returns true if `environment` has been explicitly set.
  var hasEnvironment: Bool {return _storage._environment != nil}
  /// Clears the value of `environment`. Subsequent reads from it will return its default value.
  mutating func clearEnvironment() {_uniqueStorage()._environment = nil}

  var deployment: Mobile_ConfigurationDeployment {
    get {return _storage._deployment ?? Mobile_ConfigurationDeployment()}
    set {_uniqueStorage()._deployment = newValue}
  }
  /// Returns true if `deployment` has been explicitly set.
  var hasDeployment: Bool {return _storage._deployment != nil}
  /// Clears the value of `deployment`. Subsequent reads from it will return its default value.
  mutating func clearDeployment() {_uniqueStorage()._deployment = nil}

  var privacyPolicy: Mobile_ConfigurationPolicyDocument {
    get {return _storage._privacyPolicy ?? Mobile_ConfigurationPolicyDocument()}
    set {_uniqueStorage()._privacyPolicy = newValue}
  }
  /// Returns true if `privacyPolicy` has been explicitly set.
  var hasPrivacyPolicy: Bool {return _storage._privacyPolicy != nil}
  /// Clears the value of `privacyPolicy`. Subsequent reads from it will return its default value.
  mutating func clearPrivacyPolicy() {_uniqueStorage()._privacyPolicy = nil}

  var termsOfService: Mobile_ConfigurationPolicyDocument {
    get {return _storage._termsOfService ?? Mobile_ConfigurationPolicyDocument()}
    set {_uniqueStorage()._termsOfService = newValue}
  }
  /// Returns true if `termsOfService` has been explicitly set.
  var hasTermsOfService: Bool {return _storage._termsOfService != nil}
  /// Clears the value of `termsOfService`. Subsequent reads from it will return its default value.
  mutating func clearTermsOfService() {_uniqueStorage()._termsOfService = nil}

  var rights: [Mobile_ConfigurationRight] {
    get {return _storage._rights}
    set {_uniqueStorage()._rights = newValue}
  }

  var regulations: [String] {
    get {return _storage._regulations}
    set {_uniqueStorage()._regulations = newValue}
  }

  var purposes: [Mobile_ConfigurationPurpose] {
    get {return _storage._purposes}
    set {_uniqueStorage()._purposes = newValue}
  }

  var services: Dictionary<String,String> {
    get {return _storage._services}
    set {_uniqueStorage()._services = newValue}
  }

  var options: Dictionary<String,Int32> {
    get {return _storage._options}
    set {_uniqueStorage()._options = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mobile"

extension Mobile_ConfigurationOrganization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigurationOrganization"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_ConfigurationOrganization, rhs: Mobile_ConfigurationOrganization) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobile_ConfigurationPolicyScopeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigurationPolicyScopeInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "defaultScopeCode"),
    3: .same(proto: "variable"),
    4: .same(proto: "scopes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.defaultScopeCode)
      case 3: try decoder.decodeSingularStringField(value: &self.variable)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.scopes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.defaultScopeCode.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultScopeCode, fieldNumber: 2)
    }
    if !self.variable.isEmpty {
      try visitor.visitSingularStringField(value: self.variable, fieldNumber: 3)
    }
    if !self.scopes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.scopes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_ConfigurationPolicyScopeInfo, rhs: Mobile_ConfigurationPolicyScopeInfo) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.defaultScopeCode != rhs.defaultScopeCode {return false}
    if lhs.variable != rhs.variable {return false}
    if lhs.scopes != rhs.scopes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobile_ConfigurationApplication: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigurationApplication"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "name"),
    3: .same(proto: "platform"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.platform)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_ConfigurationApplication, rhs: Mobile_ConfigurationApplication) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.name != rhs.name {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobile_ConfigurationEnvironment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigurationEnvironment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "pattern"),
    3: .same(proto: "hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.pattern)
      case 3: try decoder.decodeSingularStringField(value: &self.hash)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.pattern.isEmpty {
      try visitor.visitSingularStringField(value: self.pattern, fieldNumber: 2)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_ConfigurationEnvironment, rhs: Mobile_ConfigurationEnvironment) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.pattern != rhs.pattern {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobile_ConfigurationDeployment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigurationDeployment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularInt64Field(value: &self.version)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_ConfigurationDeployment, rhs: Mobile_ConfigurationDeployment) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobile_ConfigurationPurpose: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigurationPurpose"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "code"),
    3: .same(proto: "name"),
    4: .same(proto: "description"),
    5: .same(proto: "legalBasisCode"),
    6: .same(proto: "requiresOptIn"),
    7: .same(proto: "allowsOptOut"),
    8: .same(proto: "requiresPrivacyPolicy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.description_p)
      case 5: try decoder.decodeSingularStringField(value: &self.legalBasisCode)
      case 6: try decoder.decodeSingularBoolField(value: &self.requiresOptIn)
      case 7: try decoder.decodeSingularBoolField(value: &self.allowsOptOut)
      case 8: try decoder.decodeSingularBoolField(value: &self.requiresPrivacyPolicy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    if !self.legalBasisCode.isEmpty {
      try visitor.visitSingularStringField(value: self.legalBasisCode, fieldNumber: 5)
    }
    if self.requiresOptIn != false {
      try visitor.visitSingularBoolField(value: self.requiresOptIn, fieldNumber: 6)
    }
    if self.allowsOptOut != false {
      try visitor.visitSingularBoolField(value: self.allowsOptOut, fieldNumber: 7)
    }
    if self.requiresPrivacyPolicy != false {
      try visitor.visitSingularBoolField(value: self.requiresPrivacyPolicy, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_ConfigurationPurpose, rhs: Mobile_ConfigurationPurpose) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.legalBasisCode != rhs.legalBasisCode {return false}
    if lhs.requiresOptIn != rhs.requiresOptIn {return false}
    if lhs.allowsOptOut != rhs.allowsOptOut {return false}
    if lhs.requiresPrivacyPolicy != rhs.requiresPrivacyPolicy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobile_ConfigurationIdentity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigurationIdentity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "variable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.variable)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.variable.isEmpty {
      try visitor.visitSingularStringField(value: self.variable, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_ConfigurationIdentity, rhs: Mobile_ConfigurationIdentity) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.variable != rhs.variable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobile_ConfigurationPolicyDocument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigurationPolicyDocument"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "version"),
    3: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularInt64Field(value: &self.version)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_ConfigurationPolicyDocument, rhs: Mobile_ConfigurationPolicyDocument) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.version != rhs.version {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobile_ConfigurationRight: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigurationRight"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_ConfigurationRight, rhs: Mobile_ConfigurationRight) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobile_GetConfigurationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetConfigurationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "organizationCode"),
    2: .same(proto: "applicationCode"),
    3: .same(proto: "applicationEnvironmentCode"),
    4: .same(proto: "IP"),
    5: .same(proto: "countryCode"),
    6: .same(proto: "regionCode"),
    7: .same(proto: "languageCode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.organizationCode)
      case 2: try decoder.decodeSingularStringField(value: &self.applicationCode)
      case 3: try decoder.decodeSingularStringField(value: &self.applicationEnvironmentCode)
      case 4: try decoder.decodeSingularStringField(value: &self.ip)
      case 5: try decoder.decodeSingularStringField(value: &self.countryCode)
      case 6: try decoder.decodeSingularStringField(value: &self.regionCode)
      case 7: try decoder.decodeSingularStringField(value: &self.languageCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.organizationCode.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationCode, fieldNumber: 1)
    }
    if !self.applicationCode.isEmpty {
      try visitor.visitSingularStringField(value: self.applicationCode, fieldNumber: 2)
    }
    if !self.applicationEnvironmentCode.isEmpty {
      try visitor.visitSingularStringField(value: self.applicationEnvironmentCode, fieldNumber: 3)
    }
    if !self.ip.isEmpty {
      try visitor.visitSingularStringField(value: self.ip, fieldNumber: 4)
    }
    if !self.countryCode.isEmpty {
      try visitor.visitSingularStringField(value: self.countryCode, fieldNumber: 5)
    }
    if !self.regionCode.isEmpty {
      try visitor.visitSingularStringField(value: self.regionCode, fieldNumber: 6)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_GetConfigurationRequest, rhs: Mobile_GetConfigurationRequest) -> Bool {
    if lhs.organizationCode != rhs.organizationCode {return false}
    if lhs.applicationCode != rhs.applicationCode {return false}
    if lhs.applicationEnvironmentCode != rhs.applicationEnvironmentCode {return false}
    if lhs.ip != rhs.ip {return false}
    if lhs.countryCode != rhs.countryCode {return false}
    if lhs.regionCode != rhs.regionCode {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mobile_GetConfigurationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetConfigurationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "language"),
    2: .same(proto: "countryCode"),
    3: .same(proto: "regionCode"),
    4: .same(proto: "organization"),
    5: .same(proto: "app"),
    6: .same(proto: "environments"),
    7: .same(proto: "policyScope"),
    8: .same(proto: "identities"),
    9: .same(proto: "environment"),
    10: .same(proto: "deployment"),
    11: .same(proto: "privacyPolicy"),
    12: .same(proto: "termsOfService"),
    13: .same(proto: "rights"),
    14: .same(proto: "regulations"),
    15: .same(proto: "purposes"),
    16: .same(proto: "services"),
    17: .same(proto: "options"),
  ]

  fileprivate class _StorageClass {
    var _language: String = String()
    var _countryCode: String = String()
    var _regionCode: String = String()
    var _organization: Mobile_ConfigurationOrganization? = nil
    var _app: Mobile_ConfigurationApplication? = nil
    var _environments: [Mobile_ConfigurationEnvironment] = []
    var _policyScope: Mobile_ConfigurationPolicyScopeInfo? = nil
    var _identities: Dictionary<String,Mobile_ConfigurationIdentity> = [:]
    var _environment: Mobile_ConfigurationEnvironment? = nil
    var _deployment: Mobile_ConfigurationDeployment? = nil
    var _privacyPolicy: Mobile_ConfigurationPolicyDocument? = nil
    var _termsOfService: Mobile_ConfigurationPolicyDocument? = nil
    var _rights: [Mobile_ConfigurationRight] = []
    var _regulations: [String] = []
    var _purposes: [Mobile_ConfigurationPurpose] = []
    var _services: Dictionary<String,String> = [:]
    var _options: Dictionary<String,Int32> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _language = source._language
      _countryCode = source._countryCode
      _regionCode = source._regionCode
      _organization = source._organization
      _app = source._app
      _environments = source._environments
      _policyScope = source._policyScope
      _identities = source._identities
      _environment = source._environment
      _deployment = source._deployment
      _privacyPolicy = source._privacyPolicy
      _termsOfService = source._termsOfService
      _rights = source._rights
      _regulations = source._regulations
      _purposes = source._purposes
      _services = source._services
      _options = source._options
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._language)
        case 2: try decoder.decodeSingularStringField(value: &_storage._countryCode)
        case 3: try decoder.decodeSingularStringField(value: &_storage._regionCode)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._organization)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._app)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._environments)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._policyScope)
        case 8: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Mobile_ConfigurationIdentity>.self, value: &_storage._identities)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._environment)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._deployment)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._privacyPolicy)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._termsOfService)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._rights)
        case 14: try decoder.decodeRepeatedStringField(value: &_storage._regulations)
        case 15: try decoder.decodeRepeatedMessageField(value: &_storage._purposes)
        case 16: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._services)
        case 17: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._options)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._language.isEmpty {
        try visitor.visitSingularStringField(value: _storage._language, fieldNumber: 1)
      }
      if !_storage._countryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryCode, fieldNumber: 2)
      }
      if !_storage._regionCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._regionCode, fieldNumber: 3)
      }
      if let v = _storage._organization {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._app {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._environments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._environments, fieldNumber: 6)
      }
      if let v = _storage._policyScope {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._identities.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Mobile_ConfigurationIdentity>.self, value: _storage._identities, fieldNumber: 8)
      }
      if let v = _storage._environment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._deployment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._privacyPolicy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._termsOfService {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if !_storage._rights.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._rights, fieldNumber: 13)
      }
      if !_storage._regulations.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._regulations, fieldNumber: 14)
      }
      if !_storage._purposes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._purposes, fieldNumber: 15)
      }
      if !_storage._services.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._services, fieldNumber: 16)
      }
      if !_storage._options.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: _storage._options, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mobile_GetConfigurationResponse, rhs: Mobile_GetConfigurationResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._language != rhs_storage._language {return false}
        if _storage._countryCode != rhs_storage._countryCode {return false}
        if _storage._regionCode != rhs_storage._regionCode {return false}
        if _storage._organization != rhs_storage._organization {return false}
        if _storage._app != rhs_storage._app {return false}
        if _storage._environments != rhs_storage._environments {return false}
        if _storage._policyScope != rhs_storage._policyScope {return false}
        if _storage._identities != rhs_storage._identities {return false}
        if _storage._environment != rhs_storage._environment {return false}
        if _storage._deployment != rhs_storage._deployment {return false}
        if _storage._privacyPolicy != rhs_storage._privacyPolicy {return false}
        if _storage._termsOfService != rhs_storage._termsOfService {return false}
        if _storage._rights != rhs_storage._rights {return false}
        if _storage._regulations != rhs_storage._regulations {return false}
        if _storage._purposes != rhs_storage._purposes {return false}
        if _storage._services != rhs_storage._services {return false}
        if _storage._options != rhs_storage._options {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
